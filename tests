import numpy as np
import unittest

class TestGaussElimination(unittest.TestCase):

    def test_underdetermined_matrix(self):
        A = np.matrix([
            [2, 0, 4],
            [0, 3, 5],
            [0, 0, 0]
        ])
        result = gauss_elimination(A)
        expected_output = "Das Gleichungssystem ist unterbestimmt."
        self.assertEqual(result, expected_output)

    def test_variable_in_matrix(self):
        A = np.matrix([
            [1, 2, 3],
            [2, 4, 6],
            [3, 6, 9]
        ])
        result = gauss_elimination(A)
        expected_output = "Das Gleichungssystem ist linear abhängig. Die Variablen sind linear abhängig, zum Beispiel: x3 = 0.5 * x2."
        self.assertEqual(result, expected_output)

    def test_regular_matrix(self):
        A = np.matrix([
            [2, 1, 3],
            [1, 3, 2],
            [3, 2, 1]
        ])
        result = gauss_elimination(A)
        expected_output = "Das Gleichungssystem hat eine eindeutige Lösung. Die Matrix ist linear unabhängig."
        self.assertEqual(result, expected_output)

    def test_linear_dependent_matrix(self):
        A = np.matrix([
            [1, 2, 3],
            [2, 4, 6],
            [3, 6, 9]
        ])
        result = gauss_elimination(A)
        expected_output = "Das Gleichungssystem ist linear abhängig. Die Matrix hat Zeilen, die linear abhängig sind."
        self.assertEqual(result, expected_output)

if __name__ == '__main__':
    unittest.main()
